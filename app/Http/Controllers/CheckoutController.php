<?php

namespace App\Http\Controllers;

use App\Models\Checkout;
use App\Models\Payment;
use App\Models\Course;
use Illuminate\Http\Request;
use Exception;
use Illuminate\Support\Facades\Auth;

class CheckoutController extends Controller
{
    public function index()
    {
        // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é studentLogin –≤–º–µ—Å—Ç–æ Auth::check()
        if (!session('studentLogin')) {
            return redirect()->route('studentLogin', ['locale' => app()->getLocale()])->with('error', 'Please login to proceed with checkout');
        }

        $cart = session('cart', []);
        $cartDetails = session('cart_details', []);

        if (empty($cart)) {
            return redirect()->route('cart', ['locale' => app()->getLocale()])->with('error', 'Your cart is empty');
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ CartController
        $subtotal = $cartDetails['subtotal'] ?? 0;
        $discount = $cartDetails['discount'] ?? 0;
        $tax = $cartDetails['tax'] ?? 0;
        $total = $cartDetails['total_amount'] ?? 0;

        return view('frontend.checkout', compact('cart', 'subtotal', 'discount', 'tax', 'total'));
    }

    public function processPayment(Request $request)
    {
        try {
            // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é studentLogin –≤–º–µ—Å—Ç–æ Auth::check()
            if (!session('studentLogin')) {
                return redirect()->route('studentLogin', ['locale' => app()->getLocale()])->with('error', 'Please login to proceed with payment');
            }

            $cart = session('cart', []);
            $cartDetails = session('cart_details', []);

            if (empty($cart)) {
                return redirect()->back()->with('error', 'Your cart is empty');
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            $request->validate([
                'payment_method' => 'required|in:sslcommerz,card,paypal,bank',
            ]);

            // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
            $studentId = session('student_id');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å—É–º–º—ã
            $subtotal = $cartDetails['subtotal'] ?? 0;
            $discount = $cartDetails['discount'] ?? 0;
            $tax = $cartDetails['tax'] ?? 0;
            $totalAmount = $cartDetails['total_amount'] ?? 0;

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å checkout
            $checkout = Checkout::create([
                'user_id' => $studentId, // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º student_id –∏–∑ —Å–µ—Å—Å–∏–∏
                'total_amount' => $totalAmount,
                'currency' => 'USD',
                'payment_method' => $request->payment_method,
                'billing_address' => [
                    'name' => session('student_name', 'Student'),
                    'email' => session('student_email', 'student@example.com')
                ],
                'cart_data' => $cart,
                'status' => 'pending'
            ]);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
            switch ($request->payment_method) {
                case 'sslcommerz':
                    return $this->processSSLCommerzPayment($checkout);
                case 'card':
                    return $this->processCardPayment($checkout, $request);
                case 'paypal':
                    return $this->processPaypalPayment($checkout, $request);
                case 'bank':
                    return $this->processBankTransfer($checkout, $request);
                default:
                    throw new Exception('Invalid payment method');
            }

        } catch (Exception $e) {
            \Log::error('Payment processing error: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Payment failed: ' . $e->getMessage());
        }
    }

    private function processSSLCommerzPayment($checkout)
    {
        try {
            // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
            $studentId = session('student_id');

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            $payment = Payment::create([
                'checkout_id' => $checkout->id,
                'user_id' => $studentId,
                'amount' => $checkout->total_amount,
                'currency' => 'USD',
                'payment_method' => 'sslcommerz',
                'payment_status' => 'pending',
                'transaction_id' => 'ssl_' . uniqid(),
                'payer_email' => session('student_email', 'student@example.com'),
                'payer_name' => session('student_name', 'Student'),
            ]);

            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API SSLCommerz
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return $this->completePayment($payment, $checkout);

        } catch (Exception $e) {
            \Log::error('SSLCommerz payment error: ' . $e->getMessage());

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
            Payment::create([
                'checkout_id' => $checkout->id,
                'user_id' => session('student_id'),
                'amount' => $checkout->total_amount,
                'currency' => 'USD',
                'payment_method' => 'sslcommerz',
                'payment_status' => 'failed',
                'payer_email' => session('student_email', 'student@example.com'),
                'payer_name' => session('student_name', 'Student'),
            ]);

            $checkout->update(['status' => 'failed']);

            return redirect()->route('payment.cancel', ['locale' => app()->getLocale()])
                ->with('error', 'SSLCommerz payment failed: ' . $e->getMessage());
        }
    }

    private function processCardPayment($checkout, $request)
    {
        try {
            $studentId = session('student_id');

            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º (Stripe –∏ —Ç.–¥.)
            // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            $payment = Payment::create([
                'checkout_id' => $checkout->id,
                'user_id' => $studentId,
                'amount' => $checkout->total_amount,
                'currency' => 'USD',
                'payment_method' => 'card',
                'payment_status' => 'completed',
                'transaction_id' => 'card_' . uniqid(),
                'payer_email' => $request->payer_email ?? session('student_email', 'student@example.com'),
                'payer_name' => $request->payer_name ?? session('student_name', 'Student'),
            ]);

            return $this->completePayment($payment, $checkout);

        } catch (Exception $e) {
            \Log::error('Card payment error: ' . $e->getMessage());

            Payment::create([
                'checkout_id' => $checkout->id,
                'user_id' => session('student_id'),
                'amount' => $checkout->total_amount,
                'currency' => 'USD',
                'payment_method' => 'card',
                'payment_status' => 'failed',
                'payer_email' => $request->payer_email ?? session('student_email', 'student@example.com'),
                'payer_name' => $request->payer_name ?? session('student_name', 'Student'),
            ]);

            return redirect()->route('payment.cancel', ['locale' => app()->getLocale()])
                ->with('error', 'Card payment failed: ' . $e->getMessage());
        }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã processPaypalPayment, processBankTransfer –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏

    private function completePayment($payment, $checkout)
    {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –∑–∞–∫–∞–∑–∞
            $payment->update(['payment_status' => 'completed']);
            $checkout->update(['status' => 'completed']);

            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏
            session()->forget('cart');
            session()->forget('cart_details');
            session()->forget('coupon_code');
            session()->forget('coupon_discount');

            // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º student_id –≤ –º–µ—Ç–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
            $this->assignCoursesToUser($checkout, session('student_id'));

            return redirect()->route('payment.success', ['locale' => app()->getLocale(), 'payment' => $payment->id])
                ->with('success', 'Payment completed successfully!');

        } catch (Exception $e) {
            \Log::error('Payment completion error: ' . $e->getMessage());
            throw new Exception('Payment completion failed: ' . $e->getMessage());
        }
    }

    // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä $studentId
    private function assignCoursesToUser($checkout, $studentId)
    {
        try {
            // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª—å Student
            // –ï—Å–ª–∏ –Ω–µ—Ç, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            $student = \App\Models\Student::find($studentId);

            if (!$student) {
                \Log::error('Student not found: ' . $studentId);
                return;
            }

            $cart = $checkout->cart_data;

            foreach ($cart as $courseId => $item) {
                $course = Course::find($courseId);
                if ($course) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ —ç—Ç–æ—Ç –∫—É—Ä—Å
                    // –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É –ª–æ–≥–∏–∫—É –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if (!$student->courses()->where('course_id', $courseId)->exists()) {
                        $student->courses()->attach($courseId, [
                            'purchased_at' => now(),
                            'payment_id' => $checkout->payments()->first()->id,
                            'checkout_id' => $checkout->id
                        ]);
                    }
                }
            }

            \Log::info('Courses assigned to student: ' . $studentId);

        } catch (Exception $e) {
            \Log::error('Course assignment error: ' . $e->getMessage());
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
        }
    }

    public function paymentSuccess($paymentId)
    {
        try {
            $payment = Payment::with(['checkout', 'user'])->findOrFail($paymentId);

            // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
            if ($payment->user_id !== session('student_id')) {
                return redirect()->route('home', ['locale' => app()->getLocale()])->with('error', 'Access denied');
            }

            return view('frontend.payment.success', compact('payment'));

        } catch (Exception $e) {
            \Log::error('Payment success page error: ' . $e->getMessage());
            return redirect()->route('home', ['locale' => app()->getLocale()])->with('error', 'Payment not found');
        }
    }

    public function paymentCancel()
    {
        return view('frontend.payment.cancel')->with('error', 'Payment was cancelled.');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        try {
            $cartData = session('cart') ?? [];

            if (empty($cartData)) {
                return redirect()->back()->with('error', 'Cart is empty');
            }

            $checkout = new Checkout;
            $checkout->user_id = Auth::id();
            $checkout->cart_data = $cartData;
            $checkout->payer_name = $request->payer_name;
            $checkout->payment_option = $request->payment_option;
            $checkout->status = $request->status ?? 'pending';
            $checkout->total_amount = 0; // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ–∑–∂–µ

            if ($checkout->save()) {
                return redirect()->route('instructor.index', ['locale' => app()->getLocale()])->with('success', 'Checkout created successfully');
            } else {
                return redirect()->back()->withInput()->with('error', 'Please try again');
            }
        } catch (Exception $e) {
            \Log::error('Checkout store error: ' . $e->getMessage());
            return redirect()->back()->withInput()->with('error', 'Error creating checkout');
        }
    }

    /**
     * Confirm SSLCommerz payment (callback –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
     */
    public function confirmSSLCommerzPayment(Request $request)
    {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç SSLCommerz
            $transactionId = $request->tran_id;
            $status = $request->status;

            // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ transaction_id
            $payment = Payment::where('transaction_id', $transactionId)->first();

            if (!$payment) {
                \Log::error('SSLCommerz payment not found: ' . $transactionId);
                return response()->json(['error' => 'Payment not found'], 404);
            }

            if ($status === 'VALID') {
                // –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                $payment->update(['payment_status' => 'completed']);
                $payment->checkout->update(['status' => 'completed']);

                // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏
                session()->forget('cart');
                session()->forget('cart_details');
                session()->forget('coupon_code');
                session()->forget('coupon_discount');

                $this->assignCoursesToUser($payment->checkout);

                return response()->json(['success' => true]);
            } else {
                // –ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                $payment->update(['payment_status' => 'failed']);
                $payment->checkout->update(['status' => 'failed']);
                return response()->json(['error' => 'Payment failed'], 400);
            }

        } catch (Exception $e) {
            \Log::error('SSLCommerz confirmation error: ' . $e->getMessage());
            return response()->json(['error' => 'Internal server error'], 500);
        }
    }
}
