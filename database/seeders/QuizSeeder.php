<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Quiz;
use App\Models\QuizTranslation;
use App\Models\Lesson;
use App\Models\LessonTranslation;

class QuizSeeder extends Seeder
{
    public function run(): void
    {
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏
        $lessons = Lesson::with('translations')->get();

        if ($lessons->isEmpty()) {
            $this->command->info('No lessons found. Please seed lessons first.');
            return;
        }

        $quizCount = 0;

        // –°–æ–∑–¥–∞–µ–º –∫–≤–∏–∑—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Ä–æ–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 30% —É—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—Ç –∫–≤–∏–∑—ã)
        foreach ($lessons as $lesson) {
            // 30% chance to create a quiz for this lesson
            if (rand(1, 100) <= 30) {
                $quiz = Quiz::create([
                    'lesson_id' => $lesson->id,
                    'is_active' => true,
                    'time_limit' => rand(15, 45),
                    'passing_score' => rand(60, 80),
                    'max_attempts' => rand(1, 3),
                    'title' => null,
                    'description' => null,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);

                // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞
                $this->createQuizTranslations($quiz, $lesson);

                // –û–±–Ω–æ–≤–ª—è–µ–º lesson —Å quiz_id
                $lesson->update(['quiz_id' => $quiz->id]);

                $quizCount++;
            }
        }

        $this->command->info("‚úÖ Created {$quizCount} quizzes successfully!");
        $this->command->info("üìä For {$lessons->count()} lessons");
    }

    private function createQuizTranslations(Quiz $quiz, Lesson $lesson): void
    {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —É—Ä–æ–∫–∞
        $lessonTranslations = [];
        foreach ($lesson->translations as $translation) {
            $lessonTranslations[$translation->locale] = $translation;
        }

        $translations = [
            'en' => [
                'title' => "Quiz: " . ($lessonTranslations['en']->title ?? 'Lesson ' . $lesson->id),
                'description' => "Test your knowledge of this lesson with this comprehensive quiz."
            ],
            'ru' => [
                'title' => "–¢–µ—Å—Ç: " . ($lessonTranslations['ru']->title ?? '–£—Ä–æ–∫ ' . $lesson->id),
                'description' => "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."
            ],
            'ka' => [
                'title' => "·É•·Éï·Éò·Éñ·Éò: " . ($lessonTranslations['ka']->title ?? '·Éí·Éê·Éô·Éï·Éî·Éó·Éò·Éö·Éò ' . $lesson->id),
                'description' => "·Éí·Éê·Éõ·Éù·É™·Éê·Éì·Éî·Éó ·Éó·É•·Éï·Éî·Éú·Éò ·É™·Éù·Éì·Éú·Éê ·Éê·Éõ ·Éí·Éê·Éô·Éï·Éî·Éó·Éò·Éö·Éò·É° ·É®·Éî·É°·Éê·ÉÆ·Éî·Éë ·Éê·Éõ ·Éß·Éù·Éï·Éö·Éò·É°·Éõ·Éù·Éõ·É™·Éï·Éî·Éö·Éò ·É•·Éï·Éò·Éñ·Éò·Éó."
            ]
        ];

        foreach ($translations as $locale => $data) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞
            if (!isset($lessonTranslations[$locale])) {
                $this->command->warn("No {$locale} translation found for lesson ID: {$lesson->id}");
                continue;
            }

            QuizTranslation::create([
                'quiz_id' => $quiz->id,
                'locale' => $locale,
                'title' => $data['title'],
                'description' => $data['description'],
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }
    }
}
