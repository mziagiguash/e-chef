<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use App\Models\{
    Course, CourseTranslation,
    Instructor, InstructorTranslation,
    CourseCategory, CourseCategoryTranslation,
    Lesson, LessonTranslation,
    Quiz, QuizTranslation,
    Question, QuestionTranslation,
    Option, OptionTranslation
};

class CourseWithQuizzesSeeder extends Seeder
{
    public function run()
    {
        DB::statement('SET FOREIGN_KEY_CHECKS=0;');

        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        OptionTranslation::truncate();
        Option::truncate();
        QuestionTranslation::truncate();
        Question::truncate();
        QuizTranslation::truncate();
        Quiz::truncate();
        DB::table('lessons_translations')->truncate();
        Lesson::truncate();
        CourseTranslation::truncate();
        Course::truncate();
        InstructorTranslation::truncate();
        Instructor::truncate();
        CourseCategoryTranslation::truncate();
        CourseCategory::truncate();

        DB::statement('SET FOREIGN_KEY_CHECKS=1;');

        $this->command->info('üóëÔ∏è  Cleared all tables');

        // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $categories = CourseCategory::factory()->count(5)->create();
        $this->command->info('‚úÖ Course categories created: ' . $categories->count());

        // 2. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
        $instructors = Instructor::factory()->count(8)->create();
        $this->command->info('‚úÖ Instructors created: ' . $instructors->count());

        // 3. –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã
        $courses = Course::factory()->count(15)->create();
        $this->command->info('‚úÖ Courses created: ' . $courses->count());

        // 4. –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤
        $lessons = collect();
        foreach ($courses as $course) {
            $courseLessons = Lesson::factory()
                ->count(rand(3, 8))
                ->create(['course_id' => $course->id]);

            $lessons = $lessons->merge($courseLessons);
        }
        $this->command->info('‚úÖ Lessons created: ' . $lessons->count());

        // 5. –°–æ–∑–¥–∞–µ–º –∫–≤–∏–∑—ã –¥–ª—è —É—Ä–æ–∫–æ–≤
        $quizzes = collect();
        foreach ($lessons as $lesson) {
            // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑ –¥–ª—è —É—Ä–æ–∫–∞
            if (rand(1, 100) <= 70) {
                $quiz = Quiz::create([
                    'lesson_id' => $lesson->id,
                    'order' => 1,
                    'is_active' => true,
                    'time_limit' => 300,
                    'passing_score' => 70,
                    'max_attempts' => 3,
                    'title' => 'Quiz for Lesson ' . $lesson->id,
                ]);

                // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–≤–∏–∑–∞
                QuizTranslation::create([
                    'quiz_id' => $quiz->id,
                    'locale' => 'en',
                    'title' => 'Quiz: Lesson ' . $lesson->id,
                    'description' => 'Test your knowledge about this lesson',
                ]);

                QuizTranslation::create([
                    'quiz_id' => $quiz->id,
                    'locale' => 'ru',
                    'title' => '–ö–≤–∏–∑: –£—Ä–æ–∫ ' . $lesson->id,
                    'description' => '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É',
                ]);

                $quizzes->push($quiz);

                // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–≤–∏–∑
                $lesson->update(['quiz_id' => $quiz->id]);

                // 6. –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞
                $questionCount = rand(5, 10);
                for ($i = 1; $i <= $questionCount; $i++) {
                    $question = Question::create([
                        'quiz_id' => $quiz->id,
                        'type' => 'single',
                        'order' => $i,
                        'points' => rand(1, 5),
                        'is_required' => true,
                        'max_choices' => null,
                        'min_rating' => null,
                        'max_rating' => null,
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);

                    // –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                    QuestionTranslation::create([
                        'question_id' => $question->id,
                        'locale' => 'en',
                        'content' => 'Question ' . $i . ' for quiz ' . $quiz->id . '?',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);

                    QuestionTranslation::create([
                        'question_id' => $question->id,
                        'locale' => 'ru',
                        'content' => '–í–æ–ø—Ä–æ—Å ' . $i . ' –¥–ª—è –∫–≤–∏–∑–∞ ' . $quiz->id . '?',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);

                    // 7. –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                    $optionCount = rand(3, 5);
                    for ($j = 1; $j <= $optionCount; $j++) {
                        $isCorrect = $j === 1; // –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        $optionText = 'Option ' . $j . ($isCorrect ? ' (Correct)' : '');

                        $option = Option::create([
                            'question_id' => $question->id,
                            'text' => $optionText,
                            'is_correct' => $isCorrect,
                            'order' => $j,
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);

                        // –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        OptionTranslation::create([
                            'option_id' => $option->id,
                            'locale' => 'en',
                            'text' => $optionText,
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);

                        OptionTranslation::create([
                            'option_id' => $option->id,
                            'locale' => 'ru',
                            'text' => '–í–∞—Ä–∏–∞–Ω—Ç ' . $j . ($isCorrect ? ' (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π)' : ''),
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);
                    }
                }
            }
        }

        $this->command->info('‚úÖ Quizzes created: ' . $quizzes->count());
        $this->command->info('‚úÖ Questions created: ' . Question::count());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ options
        $optionsCount = DB::table('options')->count();
        $this->command->info('‚úÖ Options created: ' . $optionsCount);

        $this->command->info('üéâ Course system with quizzes seeded successfully!');
    }
}
